package fr.gouv.justice.cassiopee.invariant.peineoumesure.model;

import java.util.HashSet;
import java.util.Set;

import fr.gouv.justice.cassiopee.invariant.infraction.model.Infraction;
import fr.gouv.justice.cassiopee.invariant.peineoumesure.service.enumeration.TypePeineOuMesureEnum;
import fr.gouv.justice.cassiopee.invariant.personneevenement.model.PersonneEvenement;
import fr.gouv.justice.cassiopee.referentiel.peineoumesure.service.enumeration.SousTypeMesureEnum;
import fr.gouv.justice.cassiopee.referentiel.peineoumesure.service.enumeration.TitrePeineMesureEnum;

/**
 * Groupe generated by hbm2java
 */
public class PersonneEvenementInfraction implements java.io.Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1577486206368553234L;

    private Long id;

    private Set<PeineOuMesure> peineOuMesures = new HashSet<>();

    private Infraction infraction;

    private PersonneEvenement personneEvenement;

    /**
     *
     */
    public PersonneEvenementInfraction() {
    }

    /**
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * @param id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * @return Set<PeineOuMesure>
     */
    public Set<PeineOuMesure> getPeineOuMesures() {
        return this.peineOuMesures;
    }

    /**
     * @param peineOuMesures
     */
    public void setPeineOuMesures(Set<PeineOuMesure> peineOuMesures) {
        this.peineOuMesures = peineOuMesures;
    }

    /**
     * @return Infraction
     */
    public Infraction getInfraction() {
        return infraction;
    }

    /**
     * @param infraction
     */
    public void setInfraction(Infraction infraction) {
        this.infraction = infraction;
    }

    /**
     * permet de savoir s'il existe au moins une peine prononcee pour le titre passé en paramètre
     *
     * @param titrePeineMesureEnum
     * @return boolean
     */
    public boolean existeAuMoinsUnePeinePrononceeAtitre(TitrePeineMesureEnum titrePeineMesureEnum) {

        // Recherche des peines de la personne événement
        // pour cette infraction
        for (PeineOuMesure peineOuMesure : this.getPeineOuMesures()) {
            // Si la peine est du titre recherché, on arrête la
            // recherche.
            // Attention ne pas traiter les peines dont le titre est nul
            if ((peineOuMesure.getTitrePeineOuMesure() != null)
                    && (peineOuMesure.getTitrePeineOuMesure().getCode().equals(titrePeineMesureEnum.getCode()))) {
                return true;
            }
        }

        return false;
    }

    /**
     * @return PersonneEvenement
     */
    public PersonneEvenement getPersonneEvenement() {
        return personneEvenement;
    }

    /**
     * @param personneEvenement
     */
    public void setPersonneEvenement(PersonneEvenement personneEvenement) {
        this.personneEvenement = personneEvenement;
    }

    /**
     * Recuperer les peines ou mesure de la personne evenement infraction par type(PRONONCEE, ...) et par
     * titre(PRINCIPAL, ...); Si isRestreintPeinePartagee = true, ne pas recuperer les peines qui sont partagées sur
     * plusieurs groupe (util dans removePeinesPrononceesFromCollection de PeinePrononceeServiceImpl) la collection
     * retournée est de niveau 1
     *
     * @param typePeineOuMesureEnum
     * @param titrePeineMesureEnum
     * @param isRestreintPeinePartagee
     * @return peineOuMesureSet
     */

    public Set<PeineOuMesure> findPeinesOuMesureByTypeAndTitre(TypePeineOuMesureEnum typePeineOuMesureEnum,
            TitrePeineMesureEnum titrePeineMesureEnum, boolean isRestreintPeinePartagee) {
        Set<PeineOuMesure> peineOuMesureSet = new HashSet<>();
        /*
         * pour l'ensemble des peines de la personneEvenementInfraction, recuperer uniquement celles qui ont un type et
         * un titre passé en paramètre Restreindre si isRestreintPeinePartagee les peines partagées par +ieurs groupe
         */
        for (PeineOuMesure peineOuMesure : this.getPeineOuMesures()) {
            if (peineOuMesure.getTypePeineOuMesureEnum().getType().equals(typePeineOuMesureEnum.getType())
                    && (peineOuMesure.getTitrePeineOuMesure() != null && peineOuMesure.getTitrePeineOuMesure()
                            .getCode().equals(titrePeineMesureEnum.getCode()))) {
                if (isRestreintPeinePartagee && peineOuMesure.getGroupes().size() > 1) {
                    /*
                     * ne pas prendre les peines qui sont partagées par plusieurs groupes
                     */
                    continue;
                }

                peineOuMesureSet.add(peineOuMesure);
            }
        }
        return peineOuMesureSet;
    }

    /**
     * Récupérer les peines ou mesure de la personne evenement infraction par type(PRONONCEE, ...) pour les infractions
     * civiles. La collection retournée est de niveau 1
     *
     * @param typePeineOuMesureEnum
     *            le type de la peine ou mesure
     * @param titrePeineMesureEnum
     *            le titre (doit être égal à null)
     * @return peineOuMesureSet la liste des peines
     */

    public Set<PeineOuMesure> findPeinesOuMesureByTypeAndTitre(TypePeineOuMesureEnum typePeineOuMesureEnum,
            TitrePeineMesureEnum titrePeineMesureEnum) {
        Set<PeineOuMesure> peineOuMesureSet = new HashSet<>();
        /*
         * pour l'ensemble des peines de la personneEvenementInfraction, recuperer uniquement celles qui ont un type et
         * un titre passé en paramètre.
         */
        for (PeineOuMesure peineOuMesure : this.getPeineOuMesures()) {
            // pour les infractions civiles, le titre est null
            if (peineOuMesure.getTypePeineOuMesureEnum().getType().equals(typePeineOuMesureEnum.getType())
                    && (titrePeineMesureEnum == null && peineOuMesure.getTitrePeineOuMesure() == null)) {
                peineOuMesureSet.add(peineOuMesure);
            }
        }
        return peineOuMesureSet;
    }

    /**
     * rechercher les peineOuMesures liée à la personneEvenementInfraction suivant un type de peine
     *
     * @param typePeineOuMesureEnum
     * @return l'ensemble des PeineOuMesure
     */
    public Set<PeineOuMesure> findPeinesOuMesureByType(TypePeineOuMesureEnum typePeineOuMesureEnum) {
        Set<PeineOuMesure> peineOuMesureSet = new HashSet<>();
        /*
         * pour l'ensemble des peines de la personneEvenementInfraction, recuperer uniquement celles qui ont un type
         * passé en paramètre.
         */
        for (PeineOuMesure peineOuMesure : this.getPeineOuMesures()) {
            if (peineOuMesure.getTypePeineOuMesureEnum().getType().equals(typePeineOuMesureEnum.getType())) {
                peineOuMesureSet.add(peineOuMesure);
            }
        }
        return peineOuMesureSet;

    }

    public PeineOuMesure getPrevention(){
       return getDecision(SousTypeMesureEnum.DECISION_SUR_ACCUSATION);
    }

    public PeineOuMesure getSanction(){
        return getDecision(SousTypeMesureEnum.DECISION_SUR_SANCTION);
    }

    public PeineOuMesure getModulationDePeine(){
        return getDecision(SousTypeMesureEnum.DECISION_SUR_MODULATION_PEINE);
    }

    private PeineOuMesure getDecision(SousTypeMesureEnum sousTypeMesureEnum){
        return this.getPeineOuMesures().stream()
                                       .filter(p -> p.getPeineOuMesureType().getSousTypeAppartenance().getSousType().equals(sousTypeMesureEnum.getCode()))
                                       .findAny()
                                       .orElse(null);
    }
}
